#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FamilyManagementSoftware
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="FamilyManagement")]
	public partial class FamilyManagementDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertMember(Member instance);
    partial void UpdateMember(Member instance);
    partial void DeleteMember(Member instance);
    partial void InsertRelationship(Relationship instance);
    partial void UpdateRelationship(Relationship instance);
    partial void DeleteRelationship(Relationship instance);
    partial void InsertParentage(Parentage instance);
    partial void UpdateParentage(Parentage instance);
    partial void DeleteParentage(Parentage instance);
    partial void InsertAuthentication(Authentication instance);
    partial void UpdateAuthentication(Authentication instance);
    partial void DeleteAuthentication(Authentication instance);
    #endregion
		
		public FamilyManagementDataContext() : 
				base(global::FamilyManagementSoftware.Properties.Settings.Default.FamilyManagementConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public FamilyManagementDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FamilyManagementDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FamilyManagementDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public FamilyManagementDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Member> Members
		{
			get
			{
				return this.GetTable<Member>();
			}
		}
		
		public System.Data.Linq.Table<Relationship> Relationships
		{
			get
			{
				return this.GetTable<Relationship>();
			}
		}
		
		public System.Data.Linq.Table<Parentage> Parentages
		{
			get
			{
				return this.GetTable<Parentage>();
			}
		}
		
		public System.Data.Linq.Table<Authentication> Authentications
		{
			get
			{
				return this.GetTable<Authentication>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Member")]
	public partial class Member : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _memID;
		
		private string _memName;
		
		private string _rustic;
		
		private string _gender;
		
		private System.DateTime _dob;
		
		private System.Nullable<System.DateTime> _dod;
		
		private string _address;
		
		private EntitySet<Relationship> _Relationships;
		
		private EntitySet<Relationship> _Relationships1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmemIDChanging(int value);
    partial void OnmemIDChanged();
    partial void OnmemNameChanging(string value);
    partial void OnmemNameChanged();
    partial void OnrusticChanging(string value);
    partial void OnrusticChanged();
    partial void OngenderChanging(string value);
    partial void OngenderChanged();
    partial void OndobChanging(System.DateTime value);
    partial void OndobChanged();
    partial void OndodChanging(System.Nullable<System.DateTime> value);
    partial void OndodChanged();
    partial void OnaddressChanging(string value);
    partial void OnaddressChanged();
    #endregion
		
		public Member()
		{
			this._Relationships = new EntitySet<Relationship>(new Action<Relationship>(this.attach_Relationships), new Action<Relationship>(this.detach_Relationships));
			this._Relationships1 = new EntitySet<Relationship>(new Action<Relationship>(this.attach_Relationships1), new Action<Relationship>(this.detach_Relationships1));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_memID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int memID
		{
			get
			{
				return this._memID;
			}
			set
			{
				if ((this._memID != value))
				{
					this.OnmemIDChanging(value);
					this.SendPropertyChanging();
					this._memID = value;
					this.SendPropertyChanged("memID");
					this.OnmemIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_memName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string memName
		{
			get
			{
				return this._memName;
			}
			set
			{
				if ((this._memName != value))
				{
					this.OnmemNameChanging(value);
					this.SendPropertyChanging();
					this._memName = value;
					this.SendPropertyChanged("memName");
					this.OnmemNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rustic", DbType="NVarChar(50)")]
		public string rustic
		{
			get
			{
				return this._rustic;
			}
			set
			{
				if ((this._rustic != value))
				{
					this.OnrusticChanging(value);
					this.SendPropertyChanging();
					this._rustic = value;
					this.SendPropertyChanged("rustic");
					this.OnrusticChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_gender", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string gender
		{
			get
			{
				return this._gender;
			}
			set
			{
				if ((this._gender != value))
				{
					this.OngenderChanging(value);
					this.SendPropertyChanging();
					this._gender = value;
					this.SendPropertyChanged("gender");
					this.OngenderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dob", DbType="Date NOT NULL")]
		public System.DateTime dob
		{
			get
			{
				return this._dob;
			}
			set
			{
				if ((this._dob != value))
				{
					this.OndobChanging(value);
					this.SendPropertyChanging();
					this._dob = value;
					this.SendPropertyChanged("dob");
					this.OndobChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dod", DbType="Date")]
		public System.Nullable<System.DateTime> dod
		{
			get
			{
				return this._dod;
			}
			set
			{
				if ((this._dod != value))
				{
					this.OndodChanging(value);
					this.SendPropertyChanging();
					this._dod = value;
					this.SendPropertyChanged("dod");
					this.OndodChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_address", DbType="NVarChar(50)")]
		public string address
		{
			get
			{
				return this._address;
			}
			set
			{
				if ((this._address != value))
				{
					this.OnaddressChanging(value);
					this.SendPropertyChanging();
					this._address = value;
					this.SendPropertyChanged("address");
					this.OnaddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Relationship", Storage="_Relationships", ThisKey="memID", OtherKey="person1ID")]
		public EntitySet<Relationship> Relationships
		{
			get
			{
				return this._Relationships;
			}
			set
			{
				this._Relationships.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Relationship1", Storage="_Relationships1", ThisKey="memID", OtherKey="person2ID")]
		public EntitySet<Relationship> Relationships1
		{
			get
			{
				return this._Relationships1;
			}
			set
			{
				this._Relationships1.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Relationships(Relationship entity)
		{
			this.SendPropertyChanging();
			entity.Member = this;
		}
		
		private void detach_Relationships(Relationship entity)
		{
			this.SendPropertyChanging();
			entity.Member = null;
		}
		
		private void attach_Relationships1(Relationship entity)
		{
			this.SendPropertyChanging();
			entity.Member1 = this;
		}
		
		private void detach_Relationships1(Relationship entity)
		{
			this.SendPropertyChanging();
			entity.Member1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Relationships")]
	public partial class Relationship : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<int> _person1ID;
		
		private System.Nullable<int> _person2ID;
		
		private string _relation;
		
		private System.Nullable<int> _familyID;
		
		private EntityRef<Member> _Member;
		
		private EntityRef<Member> _Member1;
		
		private EntityRef<Parentage> _Parentage;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void Onperson1IDChanging(System.Nullable<int> value);
    partial void Onperson1IDChanged();
    partial void Onperson2IDChanging(System.Nullable<int> value);
    partial void Onperson2IDChanged();
    partial void OnrelationChanging(string value);
    partial void OnrelationChanged();
    partial void OnparentageIDChanging(System.Nullable<int> value);
    partial void OnparentageIDChanged();
    #endregion
		
		public Relationship()
		{
			this._Member = default(EntityRef<Member>);
			this._Member1 = default(EntityRef<Member>);
			this._Parentage = default(EntityRef<Parentage>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_person1ID", DbType="Int", IsPrimaryKey=true)]
		public System.Nullable<int> person1ID
		{
			get
			{
				return this._person1ID;
			}
			set
			{
				if ((this._person1ID != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onperson1IDChanging(value);
					this.SendPropertyChanging();
					this._person1ID = value;
					this.SendPropertyChanged("person1ID");
					this.Onperson1IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_person2ID", DbType="Int", IsPrimaryKey=true)]
		public System.Nullable<int> person2ID
		{
			get
			{
				return this._person2ID;
			}
			set
			{
				if ((this._person2ID != value))
				{
					if (this._Member1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.Onperson2IDChanging(value);
					this.SendPropertyChanging();
					this._person2ID = value;
					this.SendPropertyChanged("person2ID");
					this.Onperson2IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_relation", DbType="NChar(10)")]
		public string relation
		{
			get
			{
				return this._relation;
			}
			set
			{
				if ((this._relation != value))
				{
					this.OnrelationChanging(value);
					this.SendPropertyChanging();
					this._relation = value;
					this.SendPropertyChanged("relation");
					this.OnrelationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="familyID", Storage="_familyID", DbType="Int")]
		public System.Nullable<int> parentageID
		{
			get
			{
				return this._familyID;
			}
			set
			{
				if ((this._familyID != value))
				{
					this.OnparentageIDChanging(value);
					this.SendPropertyChanging();
					this._familyID = value;
					this.SendPropertyChanged("parentageID");
					this.OnparentageIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Relationship", Storage="_Member", ThisKey="person1ID", OtherKey="memID", IsForeignKey=true)]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.Relationships.Remove(this);
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.Relationships.Add(this);
						this._person1ID = value.memID;
					}
					else
					{
						this._person1ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Relationship1", Storage="_Member1", ThisKey="person2ID", OtherKey="memID", IsForeignKey=true)]
		public Member Member1
		{
			get
			{
				return this._Member1.Entity;
			}
			set
			{
				Member previousValue = this._Member1.Entity;
				if (((previousValue != value) 
							|| (this._Member1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member1.Entity = null;
						previousValue.Relationships1.Remove(this);
					}
					this._Member1.Entity = value;
					if ((value != null))
					{
						value.Relationships1.Add(this);
						this._person2ID = value.memID;
					}
					else
					{
						this._person2ID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Member1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Parentage_Relationship", Storage="_Parentage", ThisKey="parentageID", OtherKey="pID", IsForeignKey=true)]
		public Parentage Parentage
		{
			get
			{
				return this._Parentage.Entity;
			}
			set
			{
				Parentage previousValue = this._Parentage.Entity;
				if (((previousValue != value) 
							|| (this._Parentage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Parentage.Entity = null;
						previousValue.Relationships.Remove(this);
					}
					this._Parentage.Entity = value;
					if ((value != null))
					{
						value.Relationships.Add(this);
						this._familyID = value.pID;
					}
					else
					{
						this._familyID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Parentage");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Parentage")]
	public partial class Parentage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _pID;
		
		private string _pName;
		
		private EntitySet<Relationship> _Relationships;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnpIDChanging(int value);
    partial void OnpIDChanged();
    partial void OnpNameChanging(string value);
    partial void OnpNameChanged();
    #endregion
		
		public Parentage()
		{
			this._Relationships = new EntitySet<Relationship>(new Action<Relationship>(this.attach_Relationships), new Action<Relationship>(this.detach_Relationships));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int pID
		{
			get
			{
				return this._pID;
			}
			set
			{
				if ((this._pID != value))
				{
					this.OnpIDChanging(value);
					this.SendPropertyChanging();
					this._pID = value;
					this.SendPropertyChanged("pID");
					this.OnpIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_pName", DbType="NChar(10) NOT NULL", CanBeNull=false)]
		public string pName
		{
			get
			{
				return this._pName;
			}
			set
			{
				if ((this._pName != value))
				{
					this.OnpNameChanging(value);
					this.SendPropertyChanging();
					this._pName = value;
					this.SendPropertyChanged("pName");
					this.OnpNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Parentage_Relationship", Storage="_Relationships", ThisKey="pID", OtherKey="parentageID")]
		public EntitySet<Relationship> Relationships
		{
			get
			{
				return this._Relationships;
			}
			set
			{
				this._Relationships.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Relationships(Relationship entity)
		{
			this.SendPropertyChanging();
			entity.Parentage = this;
		}
		
		private void detach_Relationships(Relationship entity)
		{
			this.SendPropertyChanging();
			entity.Parentage = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Authentication")]
	public partial class Authentication : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _username;
		
		private string _password;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnusernameChanging(string value);
    partial void OnusernameChanged();
    partial void OnpasswordChanging(string value);
    partial void OnpasswordChanged();
    #endregion
		
		public Authentication()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_username", DbType="NChar(100) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string username
		{
			get
			{
				return this._username;
			}
			set
			{
				if ((this._username != value))
				{
					this.OnusernameChanging(value);
					this.SendPropertyChanging();
					this._username = value;
					this.SendPropertyChanged("username");
					this.OnusernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_password", DbType="NChar(100) NOT NULL", CanBeNull=false)]
		public string password
		{
			get
			{
				return this._password;
			}
			set
			{
				if ((this._password != value))
				{
					this.OnpasswordChanging(value);
					this.SendPropertyChanging();
					this._password = value;
					this.SendPropertyChanged("password");
					this.OnpasswordChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
